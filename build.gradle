/*
 * Copyright (c) 2017 Cadenza United Kingdom Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.21"
    }
}

allprojects {
    group 'com.cadenzauk'

    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    dependsOn gradle.includedBuild('siesta-db2').task(':test')
    dependsOn gradle.includedBuild('siesta-firebird').task(':test')
    dependsOn gradle.includedBuild('siesta-mariadb').task(':test')
    dependsOn gradle.includedBuild('siesta-mysql').task(':test')
    dependsOn gradle.includedBuild('siesta-oracle').task(':test')
    dependsOn gradle.includedBuild('siesta-postgres').task(':test')
    dependsOn gradle.includedBuild('siesta-sqlserver').task(':test')
}

test {
    dependsOn gradle.includedBuild('siesta').task(':test')
    dependsOn gradle.includedBuild('siesta-kotlin').task(':test')
    dependsOn gradle.includedBuild('siesta-jackson').task(':test')
}

clean {
    dependsOn gradle.includedBuild('siesta').task(':clean')
    dependsOn gradle.includedBuild('siesta-kotlin').task(':clean')
    dependsOn gradle.includedBuild('siesta-jackson').task(':clean')
    dependsOn gradle.includedBuild('siesta-db2').task(':clean')
    dependsOn gradle.includedBuild('siesta-firebird').task(':clean')
    dependsOn gradle.includedBuild('siesta-mariadb').task(':clean')
    dependsOn gradle.includedBuild('siesta-mysql').task(':clean')
    dependsOn gradle.includedBuild('siesta-oracle').task(':clean')
    dependsOn gradle.includedBuild('siesta-postgres').task(':clean')
    dependsOn gradle.includedBuild('siesta-sqlserver').task(':clean')
}

check.dependsOn('integrationTest')

subprojects {
    project.ext {
        h2Version = '1.4.199'
        hsqldbVersion = '2.7.1'
        derbyVersion = '10.17.1.0'
        junitJupiterVersion = '5.3.2'
        mockitoVersion = '2.23.4'
        springVersion = '5.1.3.RELEASE'
    }

    test {
        useJUnitPlatform {
            excludeEngines 'junit-vintage'
        }
    }

    repositories {
        mavenCentral()
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from tasks.javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    dependencies {
        testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.11'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
    }
}
